  #include <Adafruit_GPS.h>

  #include <SPI.h>

#include <Adafruit_SleepyDog.h>

#include <SparkFun_I2C_GPS_Arduino_Library.h> //Use Library Manager or download here: https://github.com/sparkfun/SparkFun_I2C_GPS_Arduino_Library
I2CGPS myI2CGPS; //Hook object to the library

#include <TinyGPS++.h> //From: https://github.com/mikalhart/TinyGPSPlus
TinyGPSPlus gps; //Declare gps object

#include <Wire.h>
#include <Adafruit_MPL3115A2.h>
#include <SD.h>
Adafruit_MPL3115A2 baro = Adafruit_MPL3115A2();



   // what's the name of the hardware serial port?
  #define GPSSerial Serial1
  // Connect to the GPS on the hardware port
  Adafruit_GPS GPS(&GPSSerial);
  // Set GPSECHO to 'false' to turn off echoing the GPS data to the Serial console
  // Set to 'true' if you want to debug and listen to the raw GPS sentences
  #define GPSECHO false
  uint32_t timer = millis();





long lastWriteTime = 0;           // timestamp for last write attempt
long interval = 1000;            // time between readings
char fileName[] = "datalog.txt";  // filename to save on SD card
String configString;

void setup()
{
  delay (5000);
  Serial.begin(115200);
  Serial.println("GTOP Read Example");

  // initialize digital pin LED_BUILTIN as an output.
  pinMode(LED_BUILTIN, OUTPUT);
      
// startSDCard() blocks everything until the card is present
  // and writable:
    if (startSDCard() == true) {
    Serial.println("card initialized.");
    delay(100);
    // open the log file:
    File logFile = SD.open(fileName, FILE_WRITE);
    // write header columns to file:
    if (logFile) {
      logFile.println("-----");
      logFile.close();
    }
  }
 Watchdog.enable(5000);
 Serial.println("watchdog enabled");

  // 9600 NMEA is the default baud rate for Adafruit MTK GPS's- some use 4800
  GPS.begin(9600);
  // uncomment this line to turn on RMC (recommended minimum) and GGA (fix data) including altitude
  GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCGGA);
  // uncomment this line to turn on only the "minimum recommended" data
  //GPS.sendCommand(PMTK_SET_NMEA_OUTPUT_RMCONLY);
  // For parsing data, we don't suggest using anything but either RMC only or RMC+GGA since
  // the parser doesn't care about other sentences at this time
  // Set the update rate
  GPS.sendCommand(PMTK_SET_NMEA_UPDATE_1HZ); // 1 Hz update rate
  // For the parsing code to work nicely and have time to sort thru the data, and
  // print it out we don't suggest using anything higher than 1 Hz

  // Request updates on antenna status, comment out to keep quiet
  GPS.sendCommand(PGCMD_ANTENNA);

  delay(1000);

  // Ask for firmware version
  GPSSerial.println(PMTK_Q_RELEASE);
  Serial.println("setup complete");
 
}

void loop() {
 Watchdog.reset();
  Serial.println("watchdog reset");
  if (! baro.begin()) {
    Serial.println("Couldnt find sensor");
    return;
  }

  displayInfo();
}


//Display new GPS info
void displayInfo()
{

     float vbat = analogRead(A7);
      vbat *= 2;  // 200ohm vastus jakaa, tuplataan takaisin
      vbat *= 3.3;  //  referenssij√§nnite x3.3V
      vbat /= 1024;  // refe antaa aina x1k
      Serial.println(vbat);
  
  //We have new GPS data to deal with!
/*
  if (gps.time.isValid())
  {
    Serial.print(F("Date: "));
    Serial.print(gps.date.month());
    Serial.print(F("/"));
    Serial.print(gps.date.day());
    Serial.print(F("/"));
    Serial.print(gps.date.year());

    Serial.print((" Time: "));
    if (gps.time.hour() < 10) Serial.print(F("0"));
    Serial.print(gps.time.hour());
    Serial.print(F(":"));
    if (gps.time.minute() < 10) Serial.print(F("0"));
    Serial.print(gps.time.minute());
    Serial.print(F(":"));
    if (gps.time.second() < 10) Serial.print(F("0"));
    Serial.print(gps.time.second());

    Serial.println(); //Done printing time
  }
  else
  {
    Serial.println(F("Time not yet valid"));
  }

  if (gps.location.isValid())
  {
    Serial.print("Location: ");
    Serial.print(gps.location.lat(), 6);
    Serial.print(F(", "));
    Serial.print(gps.location.lng(), 6);
    Serial.println();
    Serial.println(gps.altitude.meters(), 6); // Altitude in meters (double)
  }
  else
  {
    Serial.println(F("Location not yet valid"));
  }

*/

  // read data from the GPS in the 'main loop'
  char c = GPS.read();
  // if you want to debug, this is a good time to do it!
  if (GPSECHO)
    if (c) Serial.print(c);
  // if a sentence is received, we can check the checksum, parse it...
  if (GPS.newNMEAreceived()) {
    // a tricky thing here is if we print the NMEA sentence, or data
    // we end up not listening and catching other sentences!
    // so be very wary if using OUTPUT_ALLDATA and trying to print out data
    Serial.print(GPS.lastNMEA()); // this also sets the newNMEAreceived() flag to false
    if (!GPS.parse(GPS.lastNMEA())) // this also sets the newNMEAreceived() flag to false
      return; // we can fail to parse a sentence in which case we should just wait for another
  }

   // approximately every 2 seconds or so, print out the current stats
  
  float decDegrees = (float)((int)GPS.latitude / 100);
  float decMinutes = GPS.latitude - (decDegrees * 100);
  float fractDegrees = decMinutes / 60.0;
      Serial.println(fractDegrees, 6);

  float decDegrees2 = (float)((int)GPS.longitude / 100);
  float decMinutes2 = GPS.longitude - (decDegrees2 * 100);
  float fractDegrees2 = decMinutes2 / 60.0;
  
  byte korkeus = GPS.altitude/1000;

  
 if (millis()  - lastWriteTime >=  interval) {
    Serial.println("filewrite");
    File logFile = SD.open(fileName, FILE_WRITE);
    // write header columns to file:
    if (logFile) {
      logFile.print(millis());
            Serial.println(", N");
            logFile.print(", N");
      Serial.println(fractDegrees, 6);
      logFile.print(fractDegrees, 6);
            Serial.println(", E");
            logFile.print(", E");
      Serial.println(fractDegrees2, 6);
      logFile.print(fractDegrees2, 6);
            logFile.print(", ");
      Serial.println(GPS.altitude, 3);      
      logFile.print(GPS.altitude, 3);
            logFile.print(", ");
      logFile.print(baro.getAltitude(), 3);
            logFile.print(", ");
      logFile.print(baro.getTemperature(), 3);
            logFile.print(", ");
      logFile.println(vbat);
      Serial.print("v: " ); Serial.println(vbat);

      logFile.close();

      //------------------- vilkutus
        digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)
        delay(100);                       // wait for a second
        digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW
        delay(100);                       // wait for a second
    }
      lastWriteTime = millis();
   }
}


boolean startSDCard() {
   // wait until the card initialized successfully:
  while (!SD.begin(4)) { // chip select 4
    digitalWrite(13, HIGH);   // turn on error LED
    Serial.println("Card failed");
    delay(750);
  }
  return true;
 
}
